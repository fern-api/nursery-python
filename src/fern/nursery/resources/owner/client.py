# This file was auto-generated by Fern from our API Definition.

import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...core.jsonable_encoder import jsonable_encoder
from .errors.owner_already_exists_error import OwnerAlreadyExistsError
from .errors.owner_not_found_error import OwnerNotFoundError
from .types.custom_owner_data import CustomOwnerData
from .types.owner import Owner
from .types.owner_id import OwnerId


class OwnerClient:
    def __init__(self, *, environment: str):
        self._environment = environment

    def create(self, *, owner_id: OwnerId, data: CustomOwnerData) -> None:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", "owner"),
            json=jsonable_encoder({"ownerId": owner_id, "data": data}),
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if "errorName" in _response_json:
            if _response_json["errorName"] == "OwnerAlreadyExistsError":
                raise OwnerAlreadyExistsError()
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(self, owner_id: OwnerId) -> Owner:
        _response = httpx.request("GET", urllib.parse.urljoin(f"{self._environment}/", f"owner/{owner_id}"))
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Owner, _response_json)  # type: ignore
        if "errorName" in _response_json:
            if _response_json["errorName"] == "OwnerNotFoundError":
                raise OwnerNotFoundError()
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(self, owner_id: OwnerId, *, data: CustomOwnerData) -> Owner:
        _response = httpx.request(
            "PUT",
            urllib.parse.urljoin(f"{self._environment}/", f"owner/{owner_id}"),
            json=jsonable_encoder({"data": data}),
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Owner, _response_json)  # type: ignore
        if "errorName" in _response_json:
            if _response_json["errorName"] == "OwnerNotFoundError":
                raise OwnerNotFoundError()
        raise ApiError(status_code=_response.status_code, body=_response_json)
