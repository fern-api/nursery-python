# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...core.jsonable_encoder import jsonable_encoder
from ..owner.errors.owner_not_found_error import OwnerNotFoundError
from ..owner.types.owner_id import OwnerId
from .errors.token_not_found_error import TokenNotFoundError
from .types.create_token_response import CreateTokenResponse
from .types.token_id import TokenId
from .types.token_metadata import TokenMetadata


class TokenClient:
    def __init__(self, *, environment: str):
        self._environment = environment

    def create(
        self, *, owner_id: OwnerId, prefix: typing.Optional[str] = None, description: typing.Optional[str] = None
    ) -> CreateTokenResponse:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", "tokens/create"),
            json=jsonable_encoder({"ownerId": owner_id, "prefix": prefix, "description": description}),
            timeout=None,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateTokenResponse, _response_json)  # type: ignore
        if "errorName" in _response_json:
            if _response_json["errorName"] == "OwnerNotFoundError":
                raise OwnerNotFoundError()
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_token_metadata(self, *, token: str) -> TokenMetadata:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", "tokens/metadata"),
            json=jsonable_encoder({"token": token}),
            timeout=None,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(TokenMetadata, _response_json)  # type: ignore
        if "errorName" in _response_json:
            if _response_json["errorName"] == "TokenNotFoundError":
                raise TokenNotFoundError()
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_tokens_for_owner(self, owner_id: OwnerId) -> typing.List[TokenMetadata]:
        _response = httpx.request(
            "GET", urllib.parse.urljoin(f"{self._environment}/", f"tokens/owner/{owner_id}"), timeout=None
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[TokenMetadata], _response_json)  # type: ignore
        if "errorName" in _response_json:
            if _response_json["errorName"] == "OwnerNotFoundError":
                raise OwnerNotFoundError()
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def revoke_token_by_id(self, token_id: TokenId) -> None:
        _response = httpx.request(
            "POST", urllib.parse.urljoin(f"{self._environment}/", f"tokens/revoke/{token_id}"), timeout=None
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if "errorName" in _response_json:
            if _response_json["errorName"] == "TokenNotFoundError":
                raise TokenNotFoundError()
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def revoke_token(self, *, token: str) -> None:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", "tokens/revoke"),
            json=jsonable_encoder({"token": token}),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if "errorName" in _response_json:
            if _response_json["errorName"] == "TokenNotFoundError":
                raise TokenNotFoundError()
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncTokenClient:
    def __init__(self, *, environment: str):
        self._environment = environment

    async def create(
        self, *, owner_id: OwnerId, prefix: typing.Optional[str] = None, description: typing.Optional[str] = None
    ) -> CreateTokenResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment}/", "tokens/create"),
                json=jsonable_encoder({"ownerId": owner_id, "prefix": prefix, "description": description}),
                timeout=None,
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateTokenResponse, _response_json)  # type: ignore
        if "errorName" in _response_json:
            if _response_json["errorName"] == "OwnerNotFoundError":
                raise OwnerNotFoundError()
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_token_metadata(self, *, token: str) -> TokenMetadata:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment}/", "tokens/metadata"),
                json=jsonable_encoder({"token": token}),
                timeout=None,
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(TokenMetadata, _response_json)  # type: ignore
        if "errorName" in _response_json:
            if _response_json["errorName"] == "TokenNotFoundError":
                raise TokenNotFoundError()
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_tokens_for_owner(self, owner_id: OwnerId) -> typing.List[TokenMetadata]:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET", urllib.parse.urljoin(f"{self._environment}/", f"tokens/owner/{owner_id}"), timeout=None
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[TokenMetadata], _response_json)  # type: ignore
        if "errorName" in _response_json:
            if _response_json["errorName"] == "OwnerNotFoundError":
                raise OwnerNotFoundError()
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def revoke_token_by_id(self, token_id: TokenId) -> None:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST", urllib.parse.urljoin(f"{self._environment}/", f"tokens/revoke/{token_id}"), timeout=None
            )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if "errorName" in _response_json:
            if _response_json["errorName"] == "TokenNotFoundError":
                raise TokenNotFoundError()
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def revoke_token(self, *, token: str) -> None:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment}/", "tokens/revoke"),
                json=jsonable_encoder({"token": token}),
                timeout=None,
            )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if "errorName" in _response_json:
            if _response_json["errorName"] == "TokenNotFoundError":
                raise TokenNotFoundError()
        raise ApiError(status_code=_response.status_code, body=_response_json)
